// Copyright Â© 2015 Bryan W. Berry <bryan.berry@gmail.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package cmd

import (
	"fmt"
	"github.com/Sirupsen/logrus"
	hand "github.com/bryanwb/hand"
	"github.com/spf13/cobra"
	"os"
	"os/user"
	"path"
	"strings"
)

var log = logrus.New()

// This represents the base command when called without any subcommands
var RootCmd = &cobra.Command{
	Use:   "hand",
	Short: "hand is the home your shell scripts always wanted",
	Long: `The Hand of the King (hand) is a tool for organizing and executing shellish scripts.
It does your dirty work, so keep it clean.`,
	Run: func(cmd *cobra.Command, args []string) {
		fmt.Println(`Please pull one of hand's fingers to get started. 
Type "hand help" for more information`)
		h, err := hand.MakeHand(hand.HandHome)
		if err != nil {
			fmt.Println("Encountered error finding fingers")
			fmt.Printf("Error was %s", err.Error())
			os.Exit(1)
		}

		if len(h.Fingers) > 0 {
			fmt.Printf("Available fingers are:\n%s\n", strings.Join(h.FingerNames(), "\n"))
		} else {
			fmt.Printf("Currently no fingers available\n")
		}

		p := pingo.NewPlugin("tcp", "/Users/hitman/pr/go/src/github.com/bryanwb/hand/fingers/hello-world/hello-world")
		//p := pingo.NewPlugin("tcp", "/Users/hitman/pr/go/src/github.com/bryanwb/hand/fingers/hello-world/hello-world")
		p.Start()
		defer p.Stop()

		resp := new(hand.Response)
		if err := p.Call("ThisFinger.Execute", []string{"Go Developer"}, &resp); err != nil {
			log.Print(err)
		} else {
			log.Print(resp.Stdout)
		}
	},
}

// We overwrite cobra's default help command here, as
// Cobra doesn't know about fingers
var fingerHelp = &cobra.Command{
	Use:   "help [command]",
	Short: "Help about any command",
	Long: `Help provides help for any command in the application.
    Simply type hand help [path to command] for full details.`,
	PersistentPreRun:  func(cmd *cobra.Command, args []string) {},
	PersistentPostRun: func(cmd *cobra.Command, args []string) {},
	Run: func(c *cobra.Command, args []string) {
		log.Print("hello from fingerhelp")
		log.Printf("args are %v", args)
		cmd, _, e := c.Root().Find(args)
		if cmd == nil || e != nil {
			c.Printf("Unknown help topic %#q.", args)
			c.Root().Usage()
		} else {
			helpFunc := cmd.HelpFunc()
			helpFunc(cmd, args)
		}
	},
}

var helloCmd = &cobra.Command{
	Use:   "foo",
	Short: "bar",
	Long:  `blah`,
	Run: func(cmd *cobra.Command, args []string) {
		fmt.Println("hello prints: " + strings.Join(args, " "))
	},
}

func fingerInvoked(h *hand.Hand, args []string) bool {
	if len(args) < 2 {
		return false
	}
	return hand.Contains(h.FingerNames(), args[1])
}

func verboseSet() bool {
	if hand.Contains(os.Args, "-v") || hand.Contains(os.Args, "--verbose") {
		return true
	}
	return false
}

func makeHand() *hand.Hand {
	hand.Logger = log
	if verboseSet() {
		log.Level = logrus.DebugLevel
	}
	h, err := hand.MakeHand(hand.HandHome)
	if err != nil {
		fmt.Println("Encountered error finding fingers")
		fmt.Printf("Error was %s", err.Error())
		os.Exit(1)
	}
	return h
}

// We use cobra for basic CLI structure but cobra can't
// handle arbitrary subcommands that are dynamically loaded
// Check if the first argument is a finger, if so, execute
// the finger instead of root cobra command
func Execute() {
	h := makeHand()
	if fingerInvoked(h, os.Args) {
		f, err := h.LoadFinger()
		if err != nil {
			fmt.Errorf(err.Error())
		}
		f.Execute()
		fmt.Println("hello!")
	} else {
		RootCmd.AddCommand(helloCmd)
		if err := RootCmd.Execute(); err != nil {
			fmt.Println(err)
			os.Exit(-1)
		}
	}
}

func init() {
	currentUser, _ := user.Current()
	defaultHandHome := path.Join(currentUser.HomeDir, "/.hand")

	RootCmd.PersistentFlags().StringVarP(&hand.HandHome, "hand-home", "H",
		defaultHandHome, "Home directory for hand")
}
